shiny::runApp()
source('C:/Users/biodu/OneDrive - ufmg.br/Projetos/Rrpg/RRpgT/app.R')
runApp()
shinyServer(
function(input, output) {
plotInput <- reactive({plot(rnorm(1000))
dev.copy2pdf(file = "plot.pdf")
})
output$myplot <- renderPlot({ plotInput() })
output$foo <- downloadHandler(
filename <- "plot.pdf",
content <- function(file) {
file.copy("plot.pdf", file)
})
}
)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel( "CDF - Cumulative Distribution Function" ),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput( "bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel( plotOutput("distPlot") )
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
useShinyjs(),
withMathJax(),
title = "Sala de Controle do DM",
fluidRow( wellPanel( style="background-color:#494949;", width="100%", height="5%", h1( "Sala de Controle do DM", style="text-align:center;font-weight:bold;color:white;" ) )
),
fluidRow(
column(3,
wellPanel( style="background-color:#494949;border:none;color:white;",
h3("Usage", style="font-weight:bold;"),
p(style = "color:white;text-align:justify;",
HTML('specify the parameter values (\\(\\mu, \\sigma\\)), press the setup (gears icon) button and the lower and upper limits.
$$P(L \\lt X \\lt U) = \\int_{L}^{U}\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}dx$$
<br/>
<br/>
If you want to find the z-value for a significant value \\(\\alpha\\) (alpha) then enter the alpha value on the <strong>"Calculate Z-value Table"</strong> section. The Z-value will be calculated for \\(\\frac{\\alpha}{2}\\). \\(1 - P(X \\lt x)\\).'))
)
),
column(width = 3,
h5("Normal Distribution Parameter"),
div(style="display:inline-block;vertical-align:top;width:42%;font-size:120%;", numericInput("mu", expression("\u03BC"), value = 0)),
div(style="display:inline-block;vertical-align:top;width:42%;font-size:120%;", numericInput("sigma", expression("\u03C3"), value = 1, min = 0.1, step = 0.1)),
div(style="display:inline-block;vertical-align:top;width:10%;margin-top:28px;", actionButton("updParam", NULL, icon = icon("cogs"))),
hr(),
helpText("Cumulative value between lower and upper limits"),
conditionalPanel(condition = "input.nilai2 < input.nilai1",
p("The Upper Limit value cannot be smaller than the Lower Limit value.", style = "color:red;font-size:90%;")
),
uiOutput("prob"),
hr(),
h5("Calculate Z-value Table"),
div(style="display:inline-block;vertical-align:top;width:32%;font-size:120%;", numericInput("alpha", expression("\u03B1"), value = 0.05, step = 0.001, min = 0.00001, max = 0.99999)),
div(style="display:inline-block;vertical-align:top;width:52%;font-size:120%;", numericInput("zv", paste0("Z-value (", expression("\u03B1"), "/2)"), value = 1.96)),
div(style="display:inline-block;vertical-align:top;width:10%;margin-top:28px;", actionButton("calcZv", NULL, icon = icon("calculator"))),
hr(),
h5("Standardized Value"),
div(style="display:inline-block;vertical-align:top;width:32%;font-size:120%;", numericInput("xval", "X", value = 0)),
div(style="display:inline-block;vertical-align:top;width:52%;font-size:120%;", textInput("std", paste0("Z = (X - ", expression("\u03BC"), ")/", expression("\u03C3")), value = 0)),
div(style="display:inline-block;vertical-align:top;width:10%;margin-top:28px;", actionButton("calcStd", NULL, icon = icon("calculator")))
),
column(width = 6,
# uiOutput("slider"),
sliderInput("sliderrange", label = h4("Lower and Upper limits"), min = -4.5, max = 4.5, value = c(-1.96, 1.96), step = 0.01, width = "100%"),
uiOutput("plotTitle"),
plotOutput("plotPeluang")
)
)
shiny::runApp('TestShinny')
runApp()
runApp()
runApp()
runApp()
runApp()
cleqar
clar
clear
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
packageVersion("shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
library(tinytex)
install.packages("tinytex")
unlink('C:/Users/biodu/OneDrive - ufmg.br/UFMG/ECO/lista1_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
N = 100
R = 3
S = seq( 1, n )
S = 3000
N = 100
print( paste( "Simulacoes:", S ) )
print( paste( "Tamanho do Album:", N ) )
allDraws = c()
for( i in 1:S ) {
#print( paste( "Simulação", i ) )
draws = 0
album = c()
while( length( album ) < N ) {
draws <- draws + 1
r1 <- sample( 1:N, 1 )
album <- append( album, r1 )
album <- unique( album );
}
allDraws <- append( allDraws, draws )
}
print( paste( "Numero de Compras de pacotes com uma figurinha:", round( mean( allDraws ) ) ) )
print( paste( "Valor Esperado:", round( ( N * log( N ) ) ) ) )
